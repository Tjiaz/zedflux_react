{"ast":null,"code":"// src/utils/dateFormatter.js\nexport const formatDate = (dateString, category = \"\") => {\n  try {\n    let date;\n\n    // Special handling for sports feed\n    if (category.toLowerCase() === \"sports\") {\n      // Log the original date string for debugging\n      console.log(\"Sports date string:\", dateString);\n\n      // Try different parsing methods for sports dates\n      if (dateString.includes(\"GMT\") || dateString.includes(\"BST\")) {\n        // Remove timezone abbreviation and try parsing\n        const cleanDateString = dateString.replace(/(GMT|BST|UTC)/, \"\").trim();\n        date = new Date(cleanDateString);\n      } else {\n        // Try parsing the original string\n        date = new Date(dateString);\n      }\n    } else {\n      date = new Date(dateString);\n    }\n\n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      console.error(\"Invalid date:\", dateString);\n      return \"Date unavailable\";\n    }\n\n    // Format the date\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    });\n  } catch (error) {\n    console.error(\"Date formatting error:\", error, \"for date:\", dateString);\n    return \"Date unavailable\";\n  }\n};","map":{"version":3,"names":["formatDate","dateString","category","date","toLowerCase","console","log","includes","cleanDateString","replace","trim","Date","isNaN","getTime","error","toLocaleDateString","year","month","day"],"sources":["C:/Users/User/OneDrive/Desktop/PROJECTS/zedflux-react/Frontend/src/utils/dateFormatter.js"],"sourcesContent":["// src/utils/dateFormatter.js\r\nexport const formatDate = (dateString, category = \"\") => {\r\n  try {\r\n    let date;\r\n\r\n    // Special handling for sports feed\r\n    if (category.toLowerCase() === \"sports\") {\r\n      // Log the original date string for debugging\r\n      console.log(\"Sports date string:\", dateString);\r\n\r\n      // Try different parsing methods for sports dates\r\n      if (dateString.includes(\"GMT\") || dateString.includes(\"BST\")) {\r\n        // Remove timezone abbreviation and try parsing\r\n        const cleanDateString = dateString.replace(/(GMT|BST|UTC)/, \"\").trim();\r\n        date = new Date(cleanDateString);\r\n      } else {\r\n        // Try parsing the original string\r\n        date = new Date(dateString);\r\n      }\r\n    } else {\r\n      date = new Date(dateString);\r\n    }\r\n\r\n    // Check if date is valid\r\n    if (isNaN(date.getTime())) {\r\n      console.error(\"Invalid date:\", dateString);\r\n      return \"Date unavailable\";\r\n    }\r\n\r\n    // Format the date\r\n    return date.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Date formatting error:\", error, \"for date:\", dateString);\r\n    return \"Date unavailable\";\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAACC,UAAU,EAAEC,QAAQ,GAAG,EAAE,KAAK;EACvD,IAAI;IACF,IAAIC,IAAI;;IAER;IACA,IAAID,QAAQ,CAACE,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;MACvC;MACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,UAAU,CAAC;;MAE9C;MACA,IAAIA,UAAU,CAACM,QAAQ,CAAC,KAAK,CAAC,IAAIN,UAAU,CAACM,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC5D;QACA,MAAMC,eAAe,GAAGP,UAAU,CAACQ,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;QACtEP,IAAI,GAAG,IAAIQ,IAAI,CAACH,eAAe,CAAC;MAClC,CAAC,MAAM;QACL;QACAL,IAAI,GAAG,IAAIQ,IAAI,CAACV,UAAU,CAAC;MAC7B;IACF,CAAC,MAAM;MACLE,IAAI,GAAG,IAAIQ,IAAI,CAACV,UAAU,CAAC;IAC7B;;IAEA;IACA,IAAIW,KAAK,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,EAAE;MACzBR,OAAO,CAACS,KAAK,CAAC,eAAe,EAAEb,UAAU,CAAC;MAC1C,OAAO,kBAAkB;IAC3B;;IAEA;IACA,OAAOE,IAAI,CAACY,kBAAkB,CAAC,OAAO,EAAE;MACtCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,EAAE,WAAW,EAAEb,UAAU,CAAC;IACvE,OAAO,kBAAkB;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}